// Part of SourceAFIS Transparency API: https://sourceafis.machinezoo.com/transparency/
package com.machinezoo.sourceafis.transparency;

import java.io.*;
import java.util.*;
import java.util.regex.*;
import java.util.zip.*;
import org.apache.commons.io.*;
import com.machinezoo.noexception.*;
import com.machinezoo.sourceafis.*;
import com.machinezoo.sourceafis.transparency.keys.*;
import com.machinezoo.stagean.*;

public class TransparencyBuffer {
	private final Map<TransparencyKey<?>, List<TransparencyRecord<?>>> map = new HashMap<>();
	public TransparencyBuffer add(TransparencyRecord<?> record) {
		Objects.requireNonNull(record);
		map.computeIfAbsent(record.key(), k -> new ArrayList<>()).add(record);
		return this;
	}
	public TransparencyBuffer add(TransparencyKey<?> key, String mime, byte[] data) {
		return add(new TransparencyRecord<>(key, mime, data));
	}
	public TransparencyBuffer add(String key, String mime, byte[] data) {
		return add(TransparencyKey.parse(key), mime, data);
	}
	public TransparencyBuffer append(List<TransparencyRecord<?>> records) {
		for (var record : records)
			add(record);
		return this;
	}
	public TransparencyBuffer append(TransparencyArchive archive) {
		return append(archive.toList());
	}
	public FingerprintTransparency capture() {
		return new FingerprintTransparency() {
			@Override
			public void take(String key, String mime, byte[] data) {
				add(key, mime, data);
			}
		};
	}
	private static final Pattern FILENAME_RE = Pattern.compile("^[0-9]+-([a-z-]+)(\\.[a-z]+)$");
	private static String mime(String suffix) {
		return switch (suffix) {
			case ".cbor" -> "application/cbor";
			case ".txt" -> "text/plain";
			case ".json" -> "application/json";
			case ".xml" -> "application/xml";
			case ".jpeg" -> "image/jpeg";
			case ".png" -> "image/png";
			case ".bmp" -> "image/bmp";
			case ".tiff" -> "image/tiff";
			case ".jp2" -> "image/jp2";
			case ".wsq" -> "image/x-wsq";
			default -> "application/octet-stream";
		};
	}
	@DraftCode("Find better solution for checked exceptions.")
	public TransparencyBuffer unzip(InputStream stream) {
		Exceptions.wrap().run(() -> {
			try (var zip = new ZipInputStream(stream)) {
				while (true) {
					var entry = zip.getNextEntry();
					if (entry == null)
						break;
					var matcher = FILENAME_RE.matcher(entry.getName());
					/*
					 * Silently ignore unrecognized files, which could have been automatically generated by OS or various apps.
					 */
					if (matcher.matches()) {
						add(matcher.group(1), mime(matcher.group(2)), IOUtils.toByteArray(zip));
					}
				}
			}
		});
		return this;
	}
	public TransparencyArchive toArchive() {
		var immutable = new HashMap<TransparencyKey<?>, List<TransparencyRecord<?>>>();
		for (var key : map.keySet())
			immutable.put(key, Collections.unmodifiableList(new ArrayList<>(map.get(key))));
		return new PlainTransparencyArchive(immutable);
	}
}
