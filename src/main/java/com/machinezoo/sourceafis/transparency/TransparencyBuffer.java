// Part of SourceAFIS Transparency API: https://sourceafis.machinezoo.com/transparency/
package com.machinezoo.sourceafis.transparency;

import java.io.*;
import java.util.*;
import java.util.regex.*;
import java.util.zip.*;
import org.apache.commons.io.*;
import org.apache.commons.lang3.*;
import org.apache.commons.lang3.tuple.*;
import com.machinezoo.noexception.*;
import com.machinezoo.sourceafis.*;
import com.machinezoo.sourceafis.transparency.keys.*;

public class TransparencyBuffer implements TransparencyArchive {
	private final Map<TransparencyKey<?>, List<Pair<String, byte[]>>> map = new HashMap<>();
	private final List<TransparencyKey<?>> order = new ArrayList<>();
	@Override
	public List<TransparencyKey<?>> keys() {
		return new ArrayList<>(order);
	}
	@Override
	public int count(TransparencyKey<?> key) {
		Objects.requireNonNull(key);
		return map.getOrDefault(key, Collections.emptyList()).size();
	}
	private Optional<Pair<String, byte[]>> entry(TransparencyKey<?> key, int offset) {
		Objects.requireNonNull(key);
		var list = map.get(key);
		if (list == null || offset < 0 || offset >= list.size())
			return Optional.empty();
		return Optional.of(list.get(offset));
	}
	@Override
	public Optional<String> mime(TransparencyKey<?> key, int offset) {
		return entry(key, offset).map(e -> e.getLeft());
	}
	@Override
	public Optional<byte[]> read(TransparencyKey<?> key, int offset) {
		return entry(key, offset).map(e -> e.getRight());
	}
	public void add(TransparencyKey<?> key, String mime, byte[] data) {
		Objects.requireNonNull(key);
		Validate.notBlank(mime);
		Objects.requireNonNull(data);
		if (!map.containsKey(key)) {
			map.put(key, new ArrayList<>());
			order.add(key);
		}
		map.get(key).add(Pair.of(mime, data));
	}
	public void add(String key, String mime, byte[] data) {
		add(TransparencyKey.parse(key), mime, data);
	}
	public FingerprintTransparency capture() {
		return new FingerprintTransparency() {
			@Override
			public void take(String key, String mime, byte[] data) {
				add(key, mime, data);
			}
		};
	}
	private static final Pattern FILENAME_RE = Pattern.compile("^[0-9]+-([a-z-]+)(\\.[a-z]+)$");
	private static String mime(String suffix) {
		return switch (suffix) {
			case ".cbor" -> "application/cbor";
			case ".txt" -> "text/plain";
			case ".json" -> "application/json";
			case ".xml" -> "application/xml";
			case ".jpeg" -> "image/jpeg";
			case ".png" -> "image/png";
			case ".bmp" -> "image/bmp";
			case ".tiff" -> "image/tiff";
			case ".jp2" -> "image/jp2";
			case ".wsq" -> "image/x-wsq";
			default -> "application/octet-stream";
		};
	}
	public void unzip(InputStream stream) {
		Exceptions.wrap().run(() -> {
			try (var zip = new ZipInputStream(stream)) {
				while (true) {
					var entry = zip.getNextEntry();
					if (entry == null)
						break;
					var matcher = FILENAME_RE.matcher(entry.getName());
					/*
					 * Silently ignore unrecognized files, which could have been automatically generated by OS or various apps.
					 */
					if (matcher.matches()) {
						add(matcher.group(1), mime(matcher.group(2)), IOUtils.toByteArray(zip));
					}
				}
			}
		});
	}
}
